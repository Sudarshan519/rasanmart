define(['dart_sdk', 'packages/get/get_rx/src/rx_stream/rx_stream.dart'], (function load__packages__get__get_rx__src__rx_types__rx_types_dart(dart_sdk, packages__get__get_rx__src__rx_stream__rx_stream$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const rx_stream = packages__get__get_rx__src__rx_stream__rx_stream$46dart.get_rx__src__rx_stream__rx_stream;
  var rx_types = Object.create(dart.library);
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $containsKey = dartx.containsKey;
  var $forEach = dartx.forEach;
  var $clear = dartx.clear;
  var $_equals = dartx._equals;
  var $compareTo = dartx.compareTo;
  var $endsWith = dartx.endsWith;
  var $startsWith = dartx.startsWith;
  var $indexOf = dartx.indexOf;
  var $lastIndexOf = dartx.lastIndexOf;
  var $isEmpty = dartx.isEmpty;
  var $substring = dartx.substring;
  var $trim = dartx.trim;
  var $trimLeft = dartx.trimLeft;
  var $trimRight = dartx.trimRight;
  var $padLeft = dartx.padLeft;
  var $padRight = dartx.padRight;
  var $contains = dartx.contains;
  var $replaceAll = dartx.replaceAll;
  var $split = dartx.split;
  var $codeUnits = dartx.codeUnits;
  var $runes = dartx.runes;
  var $toLowerCase = dartx.toLowerCase;
  var $toUpperCase = dartx.toUpperCase;
  var $allMatches = dartx.allMatches;
  var $matchAsPrefix = dartx.matchAsPrefix;
  var $modulo = dartx['%'];
  var $truncate = dartx.truncate;
  var $remainder = dartx.remainder;
  var $isNaN = dartx.isNaN;
  var $isNegative = dartx.isNegative;
  var $isInfinite = dartx.isInfinite;
  var $isFinite = dartx.isFinite;
  var $abs = dartx.abs;
  var $sign = dartx.sign;
  var $round = dartx.round;
  var $floor = dartx.floor;
  var $ceil = dartx.ceil;
  var $roundToDouble = dartx.roundToDouble;
  var $floorToDouble = dartx.floorToDouble;
  var $ceilToDouble = dartx.ceilToDouble;
  var $truncateToDouble = dartx.truncateToDouble;
  var $clamp = dartx.clamp;
  var $toInt = dartx.toInt;
  var $toDouble = dartx.toDouble;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $toStringAsExponential = dartx.toStringAsExponential;
  var $toStringAsPrecision = dartx.toStringAsPrecision;
  var $leftShift = dartx['<<'];
  var $rightShift = dartx['>>'];
  var $modPow = dartx.modPow;
  var $modInverse = dartx.modInverse;
  var $gcd = dartx.gcd;
  var $isEven = dartx.isEven;
  var $isOdd = dartx.isOdd;
  var $bitLength = dartx.bitLength;
  var $toUnsigned = dartx.toUnsigned;
  var $toSigned = dartx.toSigned;
  var $iterator = dartx.iterator;
  var $addAll = dartx.addAll;
  var $length = dartx.length;
  var $insertAll = dartx.insertAll;
  var $reversed = dartx.reversed;
  var $where = dartx.where;
  var $whereType = dartx.whereType;
  var $sort = dartx.sort;
  var $plus = dartx['+'];
  var $toSet = dartx.toSet;
  var $keys = dartx.keys;
  var $remove = dartx.remove;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    StreamSubscriptionL: () => (T$.StreamSubscriptionL = dart.constFn(dart.legacy(async.StreamSubscription)))(),
    JSArrayOfStreamSubscriptionL: () => (T$.JSArrayOfStreamSubscriptionL = dart.constFn(_interceptors.JSArray$(T$.StreamSubscriptionL())))(),
    GetStreamL: () => (T$.GetStreamL = dart.constFn(dart.legacy(rx_stream.GetStream)))(),
    ListOfStreamSubscriptionL: () => (T$.ListOfStreamSubscriptionL = dart.constFn(core.List$(T$.StreamSubscriptionL())))(),
    ListLOfStreamSubscriptionL: () => (T$.ListLOfStreamSubscriptionL = dart.constFn(dart.legacy(T$.ListOfStreamSubscriptionL())))(),
    LinkedMapOfGetStreamL$ListLOfStreamSubscriptionL: () => (T$.LinkedMapOfGetStreamL$ListLOfStreamSubscriptionL = dart.constFn(_js_helper.LinkedMap$(T$.GetStreamL(), T$.ListLOfStreamSubscriptionL())))(),
    GetStreamLAndListLOfStreamSubscriptionLToNull: () => (T$.GetStreamLAndListLOfStreamSubscriptionLToNull = dart.constFn(dart.fnType(core.Null, [T$.GetStreamL(), T$.ListLOfStreamSubscriptionL()])))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    ExceptionL: () => (T$.ExceptionL = dart.constFn(dart.legacy(core.Exception)))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidToboolL: () => (T$.VoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [])))(),
    VoidToLboolL: () => (T$.VoidToLboolL = dart.constFn(dart.legacy(T$.VoidToboolL())))(),
    RxListL: () => (T$.RxListL = dart.constFn(dart.legacy(rx_types.RxList)))(),
    RxMapL: () => (T$.RxMapL = dart.constFn(dart.legacy(rx_types.RxMap)))(),
    RxSetL: () => (T$.RxSetL = dart.constFn(dart.legacy(rx_types.RxSet)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], core.Null);
    },
    get C1() {
      return C[1] = dart.constSet(core.Null, []);
    },
    get C2() {
      return C[2] = dart.constMap(core.Null, core.Null, []);
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = ["package:get/get_rx/src/rx_types/rx_types.dart"];
  var _value = dart.privateName(rx_types, "RxObjectMixin._value");
  var firstRebuild = dart.privateName(rx_types, "RxObjectMixin.firstRebuild");
  var _value$ = dart.privateName(rx_types, "_value");
  var _subscriptions = dart.privateName(rx_types, "_subscriptions");
  var subject = dart.privateName(rx_types, "NotifyManager.subject");
  var _subscriptions$ = dart.privateName(rx_types, "NotifyManager._subscriptions");
  const _is_NotifyManager_default = Symbol('_is_NotifyManager_default');
  rx_types.NotifyManager$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var GetStreamOfTL = () => (GetStreamOfTL = dart.constFn(rx_stream.GetStream$(TL())))();
    var GetStreamLOfTL = () => (GetStreamLOfTL = dart.constFn(dart.legacy(GetStreamOfTL())))();
    class NotifyManager extends core.Object {}
    NotifyManager[dart.mixinOn] = Object => class NotifyManager extends Object {
      get subject() {
        return this[subject];
      }
      set subject(value) {
        this[subject] = GetStreamLOfTL().as(value);
      }
      get [_subscriptions]() {
        return this[_subscriptions$];
      }
      set [_subscriptions](value) {
        super[_subscriptions] = value;
      }
      get canUpdate() {
        return this[_subscriptions][$isNotEmpty];
      }
      addListener(rxGetx) {
        let t3, t2, t1, t0;
        GetStreamLOfTL().as(rxGetx);
        if (!dart.test(this[_subscriptions][$containsKey](rxGetx))) {
          let subs = rxGetx.listen(dart.bind(this.subject, 'add'));
          let listSubscriptions = (t0 = this[_subscriptions], t1 = rxGetx, t2 = t0[$_get](t1), t2 == null ? (t3 = T$.JSArrayOfStreamSubscriptionL().of([]), t0[$_set](t1, t3), t3) : t2);
          listSubscriptions[$add](subs);
        }
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
        return this.subject.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      close() {
        this[_subscriptions][$forEach](dart.fn((getStream, _subscriptions) => {
          let t0;
          for (let subscription of _subscriptions) {
            t0 = subscription;
            t0 == null ? null : t0.cancel();
          }
        }, T$.GetStreamLAndListLOfStreamSubscriptionLToNull()));
        this[_subscriptions][$clear]();
        this.subject.close();
      }
    };
    (NotifyManager[dart.mixinNew] = function() {
      this[subject] = new (GetStreamOfTL()).new();
      this[_subscriptions$] = new (T$.LinkedMapOfGetStreamL$ListLOfStreamSubscriptionL()).new();
    }).prototype = NotifyManager.prototype;
    dart.addTypeTests(NotifyManager);
    NotifyManager.prototype[_is_NotifyManager_default] = true;
    dart.addTypeCaches(NotifyManager);
    NotifyManager[dart.implements] = () => [core.Object];
    dart.setMethodSignature(NotifyManager, () => ({
      __proto__: dart.getMethods(NotifyManager.__proto__),
      addListener: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      listen: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(NotifyManager, () => ({
      __proto__: dart.getGetters(NotifyManager.__proto__),
      canUpdate: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(NotifyManager, I[0]);
    dart.setFieldSignature(NotifyManager, () => ({
      __proto__: dart.getFields(NotifyManager.__proto__),
      subject: dart.fieldType(dart.legacy(rx_stream.GetStream$(dart.legacy(T)))),
      [_subscriptions]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(rx_stream.GetStream), dart.legacy(core.List$(dart.legacy(async.StreamSubscription))))))
    }));
    return NotifyManager;
  });
  rx_types.NotifyManager = rx_types.NotifyManager$();
  dart.addTypeTests(rx_types.NotifyManager, _is_NotifyManager_default);
  const _is_RxObjectMixin_default = Symbol('_is_RxObjectMixin_default');
  rx_types.RxObjectMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var RxObjectMixinOfTL = () => (RxObjectMixinOfTL = dart.constFn(rx_types.RxObjectMixin$(TL())))();
    var RxObjectMixinLOfTL = () => (RxObjectMixinLOfTL = dart.constFn(dart.legacy(RxObjectMixinOfTL())))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var TLToTL = () => (TLToTL = dart.constFn(dart.fnType(TL(), [TL()])))();
    class RxObjectMixin extends rx_types.NotifyManager$(dart.legacy(T)) {}
    RxObjectMixin[dart.mixinOn] = NotifyManager => {
      class RxObjectMixin extends NotifyManager {
        get [_value$]() {
          return this[_value];
        }
        set [_value$](value) {
          this[_value] = value;
        }
        get firstRebuild() {
          return this[firstRebuild];
        }
        set firstRebuild(value) {
          this[firstRebuild] = value;
        }
        refresh() {
          this.subject.add(this.value);
        }
        nil() {
          this.subject.add(this[_value$] = null);
        }
        call(v = null) {
          TL().as(v);
          if (v != null) {
            this.value = v;
          }
          return this.value;
        }
        get string() {
          return dart.toString(this.value);
        }
        toString() {
          return dart.toString(this.value);
        }
        toJson() {
          return this.value;
        }
        _equals(o) {
          if (o == null) return false;
          if (TL().is(o)) return dart.equals(this.value, o);
          if (RxObjectMixinLOfTL().is(o)) return dart.equals(this.value, o.value);
          return false;
        }
        get hashCode() {
          return dart.hashCode(this[_value$]);
        }
        set value(val) {
          TL().as(val);
          if (dart.equals(this[_value$], val) && !dart.test(this.firstRebuild)) return;
          this.firstRebuild = false;
          this[_value$] = val;
          this.subject.add(this[_value$]);
        }
        get value() {
          if (rx_types.RxInterface.proxy != null) {
            rx_types.RxInterface.proxy.addListener(this.subject);
          }
          return this[_value$];
        }
        get stream() {
          return this.subject.stream;
        }
        bindStream(stream) {
          let t3, t2, t1, t0;
          StreamLOfTL().as(stream);
          let listSubscriptions = (t0 = this[_subscriptions], t1 = this.subject, t2 = t0[$_get](t1), t2 == null ? (t3 = T$.JSArrayOfStreamSubscriptionL().of([]), t0[$_set](t1, t3), t3) : t2);
          listSubscriptions[$add](stream.listen(dart.fn(va => this.value = va, TLToTL())));
        }
      }
      dart.defineExtensionMethods(RxObjectMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(RxObjectMixin, ['hashCode']);
      return RxObjectMixin;
    };
    (RxObjectMixin[dart.mixinNew] = function() {
      this[_value] = null;
      this[firstRebuild] = true;
    }).prototype = RxObjectMixin.prototype;
    dart.addTypeTests(RxObjectMixin);
    RxObjectMixin.prototype[_is_RxObjectMixin_default] = true;
    dart.addTypeCaches(RxObjectMixin);
    RxObjectMixin[dart.implements] = () => [rx_types.NotifyManager$(dart.legacy(T))];
    dart.setMethodSignature(RxObjectMixin, () => ({
      __proto__: dart.getMethods(RxObjectMixin.__proto__),
      refresh: dart.fnType(dart.void, []),
      nil: dart.fnType(dart.void, []),
      call: dart.fnType(dart.legacy(T), [], [dart.legacy(core.Object)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      toJson: dart.fnType(dart.dynamic, []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      bindStream: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(RxObjectMixin, () => ({
      __proto__: dart.getGetters(RxObjectMixin.__proto__),
      string: dart.legacy(core.String),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int),
      value: dart.legacy(T),
      stream: dart.legacy(async.Stream$(dart.legacy(T)))
    }));
    dart.setSetterSignature(RxObjectMixin, () => ({
      __proto__: dart.getSetters(RxObjectMixin.__proto__),
      value: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(RxObjectMixin, I[0]);
    dart.setFieldSignature(RxObjectMixin, () => ({
      __proto__: dart.getFields(RxObjectMixin.__proto__),
      [_value$]: dart.fieldType(dart.legacy(T)),
      firstRebuild: dart.fieldType(dart.legacy(core.bool))
    }));
    return RxObjectMixin;
  });
  rx_types.RxObjectMixin = rx_types.RxObjectMixin$();
  dart.addTypeTests(rx_types.RxObjectMixin, _is_RxObjectMixin_default);
  const _is_RxInterface_default = Symbol('_is_RxInterface_default');
  rx_types.RxInterface$ = dart.generic(T => {
    class RxInterface extends core.Object {}
    (RxInterface.new = function(initial = null) {
      ;
    }).prototype = RxInterface.prototype;
    dart.addTypeTests(RxInterface);
    RxInterface.prototype[_is_RxInterface_default] = true;
    dart.addTypeCaches(RxInterface);
    dart.setLibraryUri(RxInterface, I[0]);
    return RxInterface;
  });
  rx_types.RxInterface = rx_types.RxInterface$();
  dart.defineLazy(rx_types.RxInterface, {
    /*rx_types.RxInterface.proxy*/get proxy() {
      return null;
    },
    set proxy(_) {}
  }, true);
  dart.addTypeTests(rx_types.RxInterface, _is_RxInterface_default);
  const _is_RxNotifier_default = Symbol('_is_RxNotifier_default');
  rx_types.RxNotifier$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var GetStreamOfTL = () => (GetStreamOfTL = dart.constFn(rx_stream.GetStream$(TL())))();
    var GetStreamLOfTL = () => (GetStreamLOfTL = dart.constFn(dart.legacy(GetStreamOfTL())))();
    const RxInterface_NotifyManager$36 = class RxInterface_NotifyManager extends rx_types.RxInterface$(dart.legacy(T)) {};
    (RxInterface_NotifyManager$36.new = function(initial) {
      rx_types.NotifyManager$(dart.legacy(T))[dart.mixinNew].call(this);
      RxInterface_NotifyManager$36.__proto__.new.call(this, initial);
    }).prototype = RxInterface_NotifyManager$36.prototype;
    dart.applyMixin(RxInterface_NotifyManager$36, rx_types.NotifyManager$(dart.legacy(T)));
    class RxNotifier extends RxInterface_NotifyManager$36 {
      get subject() {
        return super.subject;
      }
      set subject(value) {
        GetStreamLOfTL().as(value);
        return super.subject = value;
      }
      get [_subscriptions]() {
        return super[_subscriptions];
      }
      get canUpdate() {
        return super.canUpdate;
      }
      addListener(rxGetx) {
        GetStreamLOfTL().as(rxGetx);
        return super.addListener(rxGetx);
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
        return super.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      close() {
        return super.close();
      }
    }
    (RxNotifier.new = function(initial = null) {
      RxNotifier.__proto__.new.call(this, initial);
      ;
    }).prototype = RxNotifier.prototype;
    dart.addTypeTests(RxNotifier);
    RxNotifier.prototype[_is_RxNotifier_default] = true;
    dart.addTypeCaches(RxNotifier);
    dart.setMethodSignature(RxNotifier, () => ({
      __proto__: dart.getMethods(RxNotifier.__proto__),
      addListener: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      listen: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RxNotifier, () => ({
      __proto__: dart.getGetters(RxNotifier.__proto__),
      subject: dart.legacy(rx_stream.GetStream$(dart.legacy(T))),
      [_subscriptions]: dart.legacy(core.Map$(dart.legacy(rx_stream.GetStream), dart.legacy(core.List$(dart.legacy(async.StreamSubscription))))),
      canUpdate: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(RxNotifier, () => ({
      __proto__: dart.getSetters(RxNotifier.__proto__),
      subject: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(RxNotifier, I[0]);
    return RxNotifier;
  });
  rx_types.RxNotifier = rx_types.RxNotifier$();
  dart.addTypeTests(rx_types.RxNotifier, _is_RxNotifier_default);
  const _is__RxImpl_default = Symbol('_is__RxImpl_default');
  rx_types._RxImpl$ = dart.generic(T => {
    const RxNotifier_RxObjectMixin$36 = class RxNotifier_RxObjectMixin extends rx_types.RxNotifier$(dart.legacy(T)) {};
    (RxNotifier_RxObjectMixin$36.new = function(initial) {
      rx_types.RxObjectMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      RxNotifier_RxObjectMixin$36.__proto__.new.call(this, initial);
    }).prototype = RxNotifier_RxObjectMixin$36.prototype;
    dart.applyMixin(RxNotifier_RxObjectMixin$36, rx_types.RxObjectMixin$(dart.legacy(T)));
    class _RxImpl extends RxNotifier_RxObjectMixin$36 {
      addError(error, stackTrace = null) {
        this.subject.addError(error, stackTrace);
      }
      map(R, mapper) {
        return this.stream.map(dart.legacy(R), mapper);
      }
      update(fn) {
        fn(this[_value$]);
        this.subject.add(this[_value$]);
      }
    }
    (_RxImpl.new = function(initial) {
      _RxImpl.__proto__.new.call(this);
      this[_value$] = initial;
    }).prototype = _RxImpl.prototype;
    dart.addTypeTests(_RxImpl);
    _RxImpl.prototype[_is__RxImpl_default] = true;
    dart.addTypeCaches(_RxImpl);
    dart.setMethodSignature(_RxImpl, () => ({
      __proto__: dart.getMethods(_RxImpl.__proto__),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      map: dart.gFnType(R => [dart.legacy(async.Stream$(dart.legacy(R))), [dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(T)]))]]),
      update: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))])
    }));
    dart.setLibraryUri(_RxImpl, I[0]);
    return _RxImpl;
  });
  rx_types._RxImpl = rx_types._RxImpl$();
  dart.addTypeTests(rx_types._RxImpl, _is__RxImpl_default);
  rx_types.RxBool = class RxBool extends rx_types._RxImpl$(dart.legacy(core.bool)) {
    get isTrue() {
      return this.value;
    }
    get isFalse() {
      return !dart.test(this.isTrue);
    }
    ['&'](other) {
      return dart.test(other) && dart.test(this.value);
    }
    ['|'](other) {
      return dart.test(other) || dart.test(this.value);
    }
    ['^'](other) {
      return !dart.test(other) === this.value;
    }
    toggle() {
      this.subject.add(this[_value$] = !dart.test(this[_value$]));
      return this;
    }
    toString() {
      return dart.test(this.value) ? "true" : "false";
    }
  };
  (rx_types.RxBool.new = function(initial = null) {
    rx_types.RxBool.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxBool.prototype;
  dart.addTypeTests(rx_types.RxBool);
  dart.addTypeCaches(rx_types.RxBool);
  dart.setMethodSignature(rx_types.RxBool, () => ({
    __proto__: dart.getMethods(rx_types.RxBool.__proto__),
    '&': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.bool)]),
    '|': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.bool)]),
    '^': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.bool)]),
    toggle: dart.fnType(dart.legacy(rx_types.RxBool), [])
  }));
  dart.setGetterSignature(rx_types.RxBool, () => ({
    __proto__: dart.getGetters(rx_types.RxBool.__proto__),
    isTrue: dart.legacy(core.bool),
    isFalse: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(rx_types.RxBool, I[0]);
  dart.defineExtensionMethods(rx_types.RxBool, ['toString']);
  rx_types.RxString = class RxString extends rx_types._RxImpl$(dart.legacy(core.String)) {
    ['+'](val) {
      return dart.notNull(this[_value$]) + dart.notNull(val);
    }
    compareTo(other) {
      T$.StringL().as(other);
      return this.value[$compareTo](other);
    }
    endsWith(other) {
      return this.value[$endsWith](other);
    }
    startsWith(pattern, index = 0) {
      return this.value[$startsWith](pattern, index);
    }
    indexOf(pattern, start = 0) {
      return this.value[$indexOf](pattern, start);
    }
    lastIndexOf(pattern, start = null) {
      return this.value[$lastIndexOf](pattern, start);
    }
    get isEmpty() {
      return this.value[$isEmpty];
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    substring(startIndex, endIndex = null) {
      return this.value[$substring](startIndex, endIndex);
    }
    trim() {
      return this.value[$trim]();
    }
    trimLeft() {
      return this.value[$trimLeft]();
    }
    trimRight() {
      return this.value[$trimRight]();
    }
    padLeft(width, padding = " ") {
      return this.value[$padLeft](width, padding);
    }
    padRight(width, padding = " ") {
      return this.value[$padRight](width, padding);
    }
    contains(other, startIndex = 0) {
      return this.value[$contains](other, startIndex);
    }
    replaceAll(from, replace) {
      return this.value[$replaceAll](from, replace);
    }
    split(pattern) {
      return this.value[$split](pattern);
    }
    get codeUnits() {
      return this.value[$codeUnits];
    }
    get runes() {
      return this.value[$runes];
    }
    toLowerCase() {
      return this.value[$toLowerCase]();
    }
    toUpperCase() {
      return this.value[$toUpperCase]();
    }
    allMatches(string, start = 0) {
      return this.value[$allMatches](string, start);
    }
    matchAsPrefix(string, start = 0) {
      return this.value[$matchAsPrefix](string, start);
    }
  };
  (rx_types.RxString.new = function(initial = null) {
    rx_types.RxString.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxString.prototype;
  dart.addTypeTests(rx_types.RxString);
  dart.addTypeCaches(rx_types.RxString);
  rx_types.RxString[dart.implements] = () => [core.Comparable$(dart.legacy(core.String)), core.Pattern];
  dart.setMethodSignature(rx_types.RxString, () => ({
    __proto__: dart.getMethods(rx_types.RxString.__proto__),
    '+': dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    compareTo: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    [$compareTo]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    endsWith: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    startsWith: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Pattern)], [dart.legacy(core.int)]),
    indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Pattern)], [dart.legacy(core.int)]),
    lastIndexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Pattern)], [dart.legacy(core.int)]),
    substring: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)], [dart.legacy(core.int)]),
    trim: dart.fnType(dart.legacy(core.String), []),
    trimLeft: dart.fnType(dart.legacy(core.String), []),
    trimRight: dart.fnType(dart.legacy(core.String), []),
    padLeft: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)], [dart.legacy(core.String)]),
    padRight: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)], [dart.legacy(core.String)]),
    contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Pattern)], [dart.legacy(core.int)]),
    replaceAll: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Pattern), dart.legacy(core.String)]),
    split: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(core.Pattern)]),
    toLowerCase: dart.fnType(dart.legacy(core.String), []),
    toUpperCase: dart.fnType(dart.legacy(core.String), []),
    allMatches: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(core.Match))), [dart.legacy(core.String)], [dart.legacy(core.int)]),
    [$allMatches]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(core.Match))), [dart.legacy(core.String)], [dart.legacy(core.int)]),
    matchAsPrefix: dart.fnType(dart.legacy(core.Match), [dart.legacy(core.String)], [dart.legacy(core.int)]),
    [$matchAsPrefix]: dart.fnType(dart.legacy(core.Match), [dart.legacy(core.String)], [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(rx_types.RxString, () => ({
    __proto__: dart.getGetters(rx_types.RxString.__proto__),
    isEmpty: dart.legacy(core.bool),
    isNotEmpty: dart.legacy(core.bool),
    codeUnits: dart.legacy(core.List$(dart.legacy(core.int))),
    runes: dart.legacy(core.Runes)
  }));
  dart.setLibraryUri(rx_types.RxString, I[0]);
  dart.defineExtensionMethods(rx_types.RxString, ['compareTo', 'allMatches', 'matchAsPrefix']);
  const _is_Rx_default = Symbol('_is_Rx_default');
  rx_types.Rx$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class Rx extends rx_types._RxImpl$(dart.legacy(T)) {
      toJson() {
        let t0;
        try {
          t0 = this.value;
          return t0 == null ? null : dart.dsend(t0, 'toJson', []);
        } catch (e) {
          let _ = dart.getThrown(e);
          if (T$.ExceptionL().is(_)) {
            dart.throw(dart.str(dart.wrapType(TL())) + " has not method [toJson]");
          } else
            throw e;
        }
      }
    }
    (Rx.new = function(initial = null) {
      Rx.__proto__.new.call(this, initial);
      ;
    }).prototype = Rx.prototype;
    dart.addTypeTests(Rx);
    Rx.prototype[_is_Rx_default] = true;
    dart.addTypeCaches(Rx);
    dart.setLibraryUri(Rx, I[0]);
    return Rx;
  });
  rx_types.Rx = rx_types.Rx$();
  dart.addTypeTests(rx_types.Rx, _is_Rx_default);
  const _is__BaseRxNum_default = Symbol('_is__BaseRxNum_default');
  rx_types._BaseRxNum$ = dart.generic(T => {
    class _BaseRxNum extends rx_types._RxImpl$(dart.legacy(T)) {
      ['*'](other) {
        return dart.notNull(this.value) * dart.notNull(other);
      }
      ['%'](other) {
        return this.value[$modulo](other);
      }
      ['/'](other) {
        return dart.notNull(this.value) / dart.notNull(other);
      }
      ['~/'](other) {
        return (dart.notNull(this.value) / dart.notNull(other))[$truncate]();
      }
      _negate() {
        return -dart.notNull(this.value);
      }
      remainder(other) {
        return this.value[$remainder](other);
      }
      ['<'](other) {
        return dart.notNull(this.value) < dart.notNull(other);
      }
      ['<='](other) {
        return dart.notNull(this.value) <= dart.notNull(other);
      }
      ['>'](other) {
        return dart.notNull(this.value) > dart.notNull(other);
      }
      ['>='](other) {
        return dart.notNull(this.value) >= dart.notNull(other);
      }
      get isNaN() {
        return this.value[$isNaN];
      }
      get isNegative() {
        return this.value[$isNegative];
      }
      get isInfinite() {
        return this.value[$isInfinite];
      }
      get isFinite() {
        return this.value[$isFinite];
      }
      abs() {
        return this.value[$abs]();
      }
      get sign() {
        return this.value[$sign];
      }
      round() {
        return this.value[$round]();
      }
      floor() {
        return this.value[$floor]();
      }
      ceil() {
        return this.value[$ceil]();
      }
      truncate() {
        return this.value[$truncate]();
      }
      roundToDouble() {
        return this.value[$roundToDouble]();
      }
      floorToDouble() {
        return this.value[$floorToDouble]();
      }
      ceilToDouble() {
        return this.value[$ceilToDouble]();
      }
      truncateToDouble() {
        return this.value[$truncateToDouble]();
      }
      clamp(lowerLimit, upperLimit) {
        return this.value[$clamp](lowerLimit, upperLimit);
      }
      toInt() {
        return this.value[$toInt]();
      }
      toDouble() {
        return this.value[$toDouble]();
      }
      toStringAsFixed(fractionDigits) {
        return this.value[$toStringAsFixed](fractionDigits);
      }
      toStringAsExponential(fractionDigits = null) {
        return this.value[$toStringAsExponential](fractionDigits);
      }
      toStringAsPrecision(precision) {
        return this.value[$toStringAsPrecision](precision);
      }
    }
    (_BaseRxNum.new = function(initial) {
      _BaseRxNum.__proto__.new.call(this, initial);
      ;
    }).prototype = _BaseRxNum.prototype;
    dart.addTypeTests(_BaseRxNum);
    _BaseRxNum.prototype[_is__BaseRxNum_default] = true;
    dart.addTypeCaches(_BaseRxNum);
    dart.setMethodSignature(_BaseRxNum, () => ({
      __proto__: dart.getMethods(_BaseRxNum.__proto__),
      '*': dart.fnType(dart.legacy(core.num), [dart.legacy(core.num)]),
      '%': dart.fnType(dart.legacy(core.num), [dart.legacy(core.num)]),
      '/': dart.fnType(dart.legacy(core.double), [dart.legacy(core.num)]),
      '~/': dart.fnType(dart.legacy(core.int), [dart.legacy(core.num)]),
      _negate: dart.fnType(dart.legacy(core.num), []),
      remainder: dart.fnType(dart.legacy(core.num), [dart.legacy(core.num)]),
      '<': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.num)]),
      '<=': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.num)]),
      '>': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.num)]),
      '>=': dart.fnType(dart.legacy(core.bool), [dart.legacy(core.num)]),
      abs: dart.fnType(dart.legacy(core.num), []),
      round: dart.fnType(dart.legacy(core.int), []),
      floor: dart.fnType(dart.legacy(core.int), []),
      ceil: dart.fnType(dart.legacy(core.int), []),
      truncate: dart.fnType(dart.legacy(core.int), []),
      roundToDouble: dart.fnType(dart.legacy(core.double), []),
      floorToDouble: dart.fnType(dart.legacy(core.double), []),
      ceilToDouble: dart.fnType(dart.legacy(core.double), []),
      truncateToDouble: dart.fnType(dart.legacy(core.double), []),
      clamp: dart.fnType(dart.legacy(core.num), [dart.legacy(core.num), dart.legacy(core.num)]),
      toInt: dart.fnType(dart.legacy(core.int), []),
      toDouble: dart.fnType(dart.legacy(core.double), []),
      toStringAsFixed: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
      toStringAsExponential: dart.fnType(dart.legacy(core.String), [], [dart.legacy(core.int)]),
      toStringAsPrecision: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)])
    }));
    dart.setGetterSignature(_BaseRxNum, () => ({
      __proto__: dart.getGetters(_BaseRxNum.__proto__),
      isNaN: dart.legacy(core.bool),
      isNegative: dart.legacy(core.bool),
      isInfinite: dart.legacy(core.bool),
      isFinite: dart.legacy(core.bool),
      sign: dart.legacy(core.num)
    }));
    dart.setLibraryUri(_BaseRxNum, I[0]);
    return _BaseRxNum;
  });
  rx_types._BaseRxNum = rx_types._BaseRxNum$();
  dart.addTypeTests(rx_types._BaseRxNum, _is__BaseRxNum_default);
  rx_types.RxNum = class RxNum extends rx_types._BaseRxNum$(dart.legacy(core.num)) {
    ['+'](other) {
      this.value = dart.notNull(this.value) + dart.notNull(other);
      return this.value;
    }
    ['-'](other) {
      this.value = dart.notNull(this.value) - dart.notNull(other);
      return this.value;
    }
  };
  (rx_types.RxNum.new = function(initial) {
    rx_types.RxNum.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxNum.prototype;
  dart.addTypeTests(rx_types.RxNum);
  dart.addTypeCaches(rx_types.RxNum);
  dart.setMethodSignature(rx_types.RxNum, () => ({
    __proto__: dart.getMethods(rx_types.RxNum.__proto__),
    '+': dart.fnType(dart.legacy(core.num), [dart.legacy(core.num)]),
    '-': dart.fnType(dart.legacy(core.num), [dart.legacy(core.num)])
  }));
  dart.setLibraryUri(rx_types.RxNum, I[0]);
  rx_types.RxDouble = class RxDouble extends rx_types._BaseRxNum$(dart.legacy(core.double)) {
    ['+'](other) {
      this.value = dart.notNull(this.value) + dart.notNull(other);
      return this;
    }
    ['-'](other) {
      this.value = dart.notNull(this.value) - dart.notNull(other);
      return this;
    }
    ['*'](other) {
      return dart.notNull(this.value) * dart.notNull(other);
    }
    ['%'](other) {
      return this.value[$modulo](other);
    }
    ['/'](other) {
      return dart.notNull(this.value) / dart.notNull(other);
    }
    ['~/'](other) {
      return (dart.notNull(this.value) / dart.notNull(other))[$truncate]();
    }
    _negate() {
      return -dart.notNull(this.value);
    }
    abs() {
      return this.value[$abs]();
    }
    get sign() {
      return this.value[$sign];
    }
    round() {
      return this.value[$round]();
    }
    floor() {
      return this.value[$floor]();
    }
    ceil() {
      return this.value[$ceil]();
    }
    truncate() {
      return this.value[$truncate]();
    }
    roundToDouble() {
      return this.value[$roundToDouble]();
    }
    floorToDouble() {
      return this.value[$floorToDouble]();
    }
    ceilToDouble() {
      return this.value[$ceilToDouble]();
    }
    truncateToDouble() {
      return this.value[$truncateToDouble]();
    }
  };
  (rx_types.RxDouble.new = function(initial = null) {
    rx_types.RxDouble.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxDouble.prototype;
  dart.addTypeTests(rx_types.RxDouble);
  dart.addTypeCaches(rx_types.RxDouble);
  dart.setMethodSignature(rx_types.RxDouble, () => ({
    __proto__: dart.getMethods(rx_types.RxDouble.__proto__),
    '+': dart.fnType(dart.legacy(rx_types.RxDouble), [dart.legacy(core.num)]),
    '-': dart.fnType(dart.legacy(rx_types.RxDouble), [dart.legacy(core.num)]),
    '*': dart.fnType(dart.legacy(core.double), [dart.legacy(core.num)]),
    '%': dart.fnType(dart.legacy(core.double), [dart.legacy(core.num)]),
    _negate: dart.fnType(dart.legacy(core.double), []),
    abs: dart.fnType(dart.legacy(core.double), [])
  }));
  dart.setGetterSignature(rx_types.RxDouble, () => ({
    __proto__: dart.getGetters(rx_types.RxDouble.__proto__),
    sign: dart.legacy(core.double)
  }));
  dart.setLibraryUri(rx_types.RxDouble, I[0]);
  rx_types.RxInt = class RxInt extends rx_types._BaseRxNum$(dart.legacy(core.int)) {
    ['+'](other) {
      this.value = dart.notNull(this.value) + dart.notNull(other);
      return this;
    }
    ['-'](other) {
      this.value = dart.notNull(this.value) - dart.notNull(other);
      return this;
    }
    ['&'](other) {
      return (dart.notNull(this.value) & dart.notNull(other)) >>> 0;
    }
    ['|'](other) {
      return (dart.notNull(this.value) | dart.notNull(other)) >>> 0;
    }
    ['^'](other) {
      return (dart.notNull(this.value) ^ dart.notNull(other)) >>> 0;
    }
    ['~']() {
      return ~dart.notNull(this.value) >>> 0;
    }
    ['<<'](shiftAmount) {
      return this.value[$leftShift](shiftAmount);
    }
    ['>>'](shiftAmount) {
      return this.value[$rightShift](shiftAmount);
    }
    modPow(exponent, modulus) {
      return this.value[$modPow](exponent, modulus);
    }
    modInverse(modulus) {
      return this.value[$modInverse](modulus);
    }
    gcd(other) {
      return this.value[$gcd](other);
    }
    get isEven() {
      return this.value[$isEven];
    }
    get isOdd() {
      return this.value[$isOdd];
    }
    get bitLength() {
      return this.value[$bitLength];
    }
    toUnsigned(width) {
      return this.value[$toUnsigned](width);
    }
    toSigned(width) {
      return this.value[$toSigned](width);
    }
    _negate() {
      return -dart.notNull(this.value);
    }
    abs() {
      return this.value[$abs]();
    }
    get sign() {
      return this.value[$sign];
    }
    round() {
      return this.value[$round]();
    }
    floor() {
      return this.value[$floor]();
    }
    ceil() {
      return this.value[$ceil]();
    }
    truncate() {
      return this.value[$truncate]();
    }
    roundToDouble() {
      return this.value[$roundToDouble]();
    }
    floorToDouble() {
      return this.value[$floorToDouble]();
    }
    ceilToDouble() {
      return this.value[$ceilToDouble]();
    }
    truncateToDouble() {
      return this.value[$truncateToDouble]();
    }
  };
  (rx_types.RxInt.new = function(initial = null) {
    rx_types.RxInt.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxInt.prototype;
  dart.addTypeTests(rx_types.RxInt);
  dart.addTypeCaches(rx_types.RxInt);
  dart.setMethodSignature(rx_types.RxInt, () => ({
    __proto__: dart.getMethods(rx_types.RxInt.__proto__),
    '+': dart.fnType(dart.legacy(rx_types.RxInt), [dart.legacy(core.int)]),
    '-': dart.fnType(dart.legacy(rx_types.RxInt), [dart.legacy(core.int)]),
    '&': dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    '|': dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    '^': dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    '~': dart.fnType(dart.legacy(core.int), []),
    '<<': dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    '>>': dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    modPow: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int)]),
    modInverse: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    gcd: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    toUnsigned: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    toSigned: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    _negate: dart.fnType(dart.legacy(core.int), []),
    abs: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setGetterSignature(rx_types.RxInt, () => ({
    __proto__: dart.getGetters(rx_types.RxInt.__proto__),
    isEven: dart.legacy(core.bool),
    isOdd: dart.legacy(core.bool),
    bitLength: dart.legacy(core.int),
    sign: dart.legacy(core.int)
  }));
  dart.setLibraryUri(rx_types.RxInt, I[0]);
  const _is_RxList_default = Symbol('_is_RxList_default');
  rx_types.RxList$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var ListOfEL = () => (ListOfEL = dart.constFn(core.List$(EL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    var ListLOfEL = () => (ListLOfEL = dart.constFn(dart.legacy(ListOfEL())))();
    const ListMixin_NotifyManager$36 = class ListMixin_NotifyManager extends collection.ListMixin$(dart.legacy(E)) {};
    (ListMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(dart.legacy(core.List$(dart.legacy(E))))[dart.mixinNew].call(this);
    }).prototype = ListMixin_NotifyManager$36.prototype;
    dart.applyMixin(ListMixin_NotifyManager$36, rx_types.NotifyManager$(dart.legacy(core.List$(dart.legacy(E)))));
    const ListMixin_RxObjectMixin$36 = class ListMixin_RxObjectMixin extends ListMixin_NotifyManager$36 {};
    (ListMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(dart.legacy(core.List$(dart.legacy(E))))[dart.mixinNew].call(this);
      ListMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = ListMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(ListMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(dart.legacy(core.List$(dart.legacy(E)))));
    class RxList extends ListMixin_RxObjectMixin$36 {
      static filled(length, fill, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        return new (rx_types.RxList$(dart.legacy(E))).new(core.List$(dart.legacy(E)).filled(length, fill, {growable: growable}));
      }
      static empty(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        return new (rx_types.RxList$(dart.legacy(E))).new(core.List$(dart.legacy(E)).empty({growable: growable}));
      }
      static from(elements, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return new (rx_types.RxList$(dart.legacy(E))).new(core.List$(dart.legacy(E)).from(elements, {growable: growable}));
      }
      static of(elements, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return new (rx_types.RxList$(dart.legacy(E))).new(core.List$(dart.legacy(E)).of(elements, {growable: growable}));
      }
      static generate(length, generator, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return new (rx_types.RxList$(dart.legacy(E))).new(core.List$(dart.legacy(E)).generate(length, generator, {growable: growable}));
      }
      static unmodifiable(elements) {
        return new (rx_types.RxList$(dart.legacy(E))).new(core.List$(dart.legacy(E)).unmodifiable(elements));
      }
      get iterator() {
        return this.value[$iterator];
      }
      _set(index, val$) {
        let val = val$;
        EL().as(val);
        this[_value$][$_set](index, val);
        this.refresh();
        return val$;
      }
      ['+'](val) {
        IterableLOfEL().as(val);
        this.addAll(val);
        this.refresh();
        return this;
      }
      _get(index) {
        return this.value[$_get](index);
      }
      add(item) {
        EL().as(item);
        this[_value$][$add](item);
        this.refresh();
      }
      addAll(item) {
        IterableLOfEL().as(item);
        this[_value$][$addAll](item);
        this.refresh();
      }
      get length() {
        return this.value[$length];
      }
      get value() {
        if (rx_types.RxInterface.proxy != null) {
          rx_types.RxInterface.proxy.addListener(this.subject);
        }
        return this[_value$];
      }
      set value(val) {
        ListLOfEL().as(val);
        if (dart.equals(this[_value$], val)) return;
        this[_value$] = val;
        this.refresh();
      }
      set length(newLength) {
        this[_value$][$length] = newLength;
        this.refresh();
      }
      insertAll(index, iterable) {
        IterableLOfEL().as(iterable);
        this[_value$][$insertAll](index, iterable);
        this.refresh();
      }
      get reversed() {
        return this.value[$reversed];
      }
      where(test) {
        return this.value[$where](test);
      }
      whereType(T) {
        return this.value[$whereType](dart.legacy(T));
      }
      sort(compare = null) {
        this[_value$][$sort](compare);
        this.refresh();
      }
    }
    (RxList.new = function(initial = C[0] || CT.C0) {
      RxList.__proto__.new.call(this);
      if (initial != null) {
        this[_value$] = ListOfEL().from(initial);
      }
    }).prototype = RxList.prototype;
    dart.addTypeTests(RxList);
    RxList.prototype[_is_RxList_default] = true;
    dart.addTypeCaches(RxList);
    RxList[dart.implements] = () => [rx_types.RxInterface$(dart.legacy(core.List$(dart.legacy(E))))];
    dart.setMethodSignature(RxList, () => ({
      __proto__: dart.getMethods(RxList.__proto__),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      '+': dart.fnType(dart.legacy(rx_types.RxList$(dart.legacy(E))), [dart.legacy(core.Object)]),
      [$plus]: dart.fnType(dart.legacy(rx_types.RxList$(dart.legacy(E))), [dart.legacy(core.Object)]),
      _get: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$_get]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      insertAll: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      where: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$where]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      whereType: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      [$whereType]: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      sort: dart.fnType(dart.void, [], [dart.legacy(dart.fnType(dart.legacy(core.int), [dart.legacy(E), dart.legacy(E)]))]),
      [$sort]: dart.fnType(dart.void, [], [dart.legacy(dart.fnType(dart.legacy(core.int), [dart.legacy(E), dart.legacy(E)]))])
    }));
    dart.setGetterSignature(RxList, () => ({
      __proto__: dart.getGetters(RxList.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(E))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(E))),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int),
      reversed: dart.legacy(core.Iterable$(dart.legacy(E))),
      [$reversed]: dart.legacy(core.Iterable$(dart.legacy(E)))
    }));
    dart.setSetterSignature(RxList, () => ({
      __proto__: dart.getSetters(RxList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(RxList, I[0]);
    dart.defineExtensionMethods(RxList, [
      '_set',
      '+',
      '_get',
      'add',
      'addAll',
      'insertAll',
      'where',
      'whereType',
      'sort'
    ]);
    dart.defineExtensionAccessors(RxList, ['iterator', 'length', 'reversed']);
    return RxList;
  });
  rx_types.RxList = rx_types.RxList$();
  dart.addTypeTests(rx_types.RxList, _is_RxList_default);
  const _is_RxSet_default = Symbol('_is_RxSet_default');
  rx_types.RxSet$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var LinkedHashSetOfEL = () => (LinkedHashSetOfEL = dart.constFn(collection.LinkedHashSet$(EL())))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    const SetMixin_NotifyManager$36 = class SetMixin_NotifyManager extends collection.SetMixin$(dart.legacy(E)) {};
    (SetMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(dart.legacy(core.Set$(dart.legacy(E))))[dart.mixinNew].call(this);
    }).prototype = SetMixin_NotifyManager$36.prototype;
    dart.applyMixin(SetMixin_NotifyManager$36, rx_types.NotifyManager$(dart.legacy(core.Set$(dart.legacy(E)))));
    const SetMixin_RxObjectMixin$36 = class SetMixin_RxObjectMixin extends SetMixin_NotifyManager$36 {};
    (SetMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(dart.legacy(core.Set$(dart.legacy(E))))[dart.mixinNew].call(this);
      SetMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = SetMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(SetMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(dart.legacy(core.Set$(dart.legacy(E)))));
    class RxSet extends SetMixin_RxObjectMixin$36 {
      ['+'](val) {
        SetLOfEL().as(val);
        this.addAll(val);
        this.refresh();
        return this;
      }
      update(fn) {
        fn(this.value);
        this.refresh();
      }
      get value() {
        if (rx_types.RxInterface.proxy != null) {
          rx_types.RxInterface.proxy.addListener(this.subject);
        }
        return this[_value$];
      }
      set value(val) {
        SetLOfEL().as(val);
        if (dart.equals(this[_value$], val)) return;
        this[_value$] = val;
        this.refresh();
      }
      add(value) {
        EL().as(value);
        let val = this[_value$].add(value);
        this.refresh();
        return val;
      }
      contains(element) {
        return this.value.contains(element);
      }
      get iterator() {
        return this.value.iterator;
      }
      get length() {
        return this.value[$length];
      }
      lookup(object) {
        return this.value.lookup(object);
      }
      remove(item) {
        let hasRemoved = this[_value$].remove(item);
        if (dart.test(hasRemoved)) {
          this.refresh();
        }
        return hasRemoved;
      }
      toSet() {
        return this.value.toSet();
      }
      addAll(item) {
        IterableLOfEL().as(item);
        this[_value$].addAll(item);
        this.refresh();
      }
      clear() {
        this[_value$].clear();
        this.refresh();
      }
      removeAll(elements) {
        this[_value$].removeAll(elements);
        this.refresh();
      }
      retainAll(elements) {
        this[_value$].retainAll(elements);
        this.refresh();
      }
      retainWhere(E) {
        this[_value$].retainWhere(E);
        this.refresh();
      }
    }
    (RxSet.new = function(initial = C[1] || CT.C1) {
      RxSet.__proto__.new.call(this);
      if (initial != null) {
        this[_value$] = LinkedHashSetOfEL().from(initial);
      }
    }).prototype = RxSet.prototype;
    dart.addTypeTests(RxSet);
    RxSet.prototype[_is_RxSet_default] = true;
    dart.addTypeCaches(RxSet);
    RxSet[dart.implements] = () => [rx_types.RxInterface$(dart.legacy(core.Set$(dart.legacy(E))))];
    dart.setMethodSignature(RxSet, () => ({
      __proto__: dart.getMethods(RxSet.__proto__),
      '+': dart.fnType(dart.legacy(rx_types.RxSet$(dart.legacy(E))), [dart.legacy(core.Object)]),
      update: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(E)))]))]),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      lookup: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      toSet: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      [$toSet]: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      retainAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))])
    }));
    dart.setGetterSignature(RxSet, () => ({
      __proto__: dart.getGetters(RxSet.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(E))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(E))),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(RxSet, I[0]);
    dart.defineExtensionMethods(RxSet, ['contains', 'toSet']);
    dart.defineExtensionAccessors(RxSet, ['iterator', 'length']);
    return RxSet;
  });
  rx_types.RxSet = rx_types.RxSet$();
  dart.addTypeTests(rx_types.RxSet, _is_RxSet_default);
  const _is_RxMap_default = Symbol('_is_RxMap_default');
  rx_types.RxMap$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var LinkedHashMapOfKL$VL = () => (LinkedHashMapOfKL$VL = dart.constFn(collection.LinkedHashMap$(KL(), VL())))();
    var MapOfKL$VL = () => (MapOfKL$VL = dart.constFn(core.Map$(KL(), VL())))();
    var MapLOfKL$VL = () => (MapLOfKL$VL = dart.constFn(dart.legacy(MapOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    const MapMixin_NotifyManager$36 = class MapMixin_NotifyManager extends collection.MapMixin$(dart.legacy(K), dart.legacy(V)) {};
    (MapMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))[dart.mixinNew].call(this);
    }).prototype = MapMixin_NotifyManager$36.prototype;
    dart.applyMixin(MapMixin_NotifyManager$36, rx_types.NotifyManager$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V)))));
    const MapMixin_RxObjectMixin$36 = class MapMixin_RxObjectMixin extends MapMixin_NotifyManager$36 {};
    (MapMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))[dart.mixinNew].call(this);
      MapMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = MapMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(MapMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V)))));
    class RxMap extends MapMixin_RxObjectMixin$36 {
      static from(other) {
        return new (rx_types.RxMap$(dart.legacy(K), dart.legacy(V))).new(collection.LinkedHashMap$(dart.legacy(K), dart.legacy(V)).from(other));
      }
      static of(other) {
        return new (rx_types.RxMap$(dart.legacy(K), dart.legacy(V))).new(collection.LinkedHashMap$(dart.legacy(K), dart.legacy(V)).of(other));
      }
      static unmodifiable(other) {
        return new (rx_types.RxMap$(dart.legacy(K), dart.legacy(V))).new(core.Map$(dart.legacy(K), dart.legacy(V)).unmodifiable(other));
      }
      static identity() {
        return new (rx_types.RxMap$(dart.legacy(K), dart.legacy(V))).new(new (_js_helper.IdentityMap$(dart.legacy(K), dart.legacy(V))).new());
      }
      _get(key) {
        return this.value[$_get](key);
      }
      _set(key, value$) {
        let value = value$;
        KL().as(key);
        VL().as(value);
        this[_value$][$_set](key, value);
        this.refresh();
        return value$;
      }
      clear() {
        this[_value$][$clear]();
        this.refresh();
      }
      get keys() {
        return this.value[$keys];
      }
      remove(key) {
        let val = this[_value$][$remove](key);
        this.refresh();
        return val;
      }
      get value() {
        if (rx_types.RxInterface.proxy != null) {
          rx_types.RxInterface.proxy.addListener(this.subject);
        }
        return this[_value$];
      }
      set value(val) {
        MapLOfKL$VL().as(val);
        if (dart.equals(this[_value$], val)) return;
        this[_value$] = val;
        this.refresh();
      }
    }
    (RxMap.new = function(initial = C[2] || CT.C2) {
      RxMap.__proto__.new.call(this);
      if (initial != null) {
        this[_value$] = LinkedHashMapOfKL$VL().from(initial);
      }
    }).prototype = RxMap.prototype;
    dart.addTypeTests(RxMap);
    RxMap.prototype[_is_RxMap_default] = true;
    dart.addTypeCaches(RxMap);
    RxMap[dart.implements] = () => [rx_types.RxInterface$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))];
    dart.setMethodSignature(RxMap, () => ({
      __proto__: dart.getMethods(RxMap.__proto__),
      _get: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$_get]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(RxMap, () => ({
      __proto__: dart.getGetters(RxMap.__proto__),
      keys: dart.legacy(core.Iterable$(dart.legacy(K))),
      [$keys]: dart.legacy(core.Iterable$(dart.legacy(K)))
    }));
    dart.setLibraryUri(RxMap, I[0]);
    dart.defineExtensionMethods(RxMap, ['_get', '_set', 'clear', 'remove']);
    dart.defineExtensionAccessors(RxMap, ['keys']);
    return RxMap;
  });
  rx_types.RxMap = rx_types.RxMap$();
  dart.addTypeTests(rx_types.RxMap, _is_RxMap_default);
  rx_types['StringExtension|get#obs'] = function StringExtension$124get$35obs($this) {
    return new rx_types.RxString.new($this);
  };
  rx_types['IntExtension|get#obs'] = function IntExtension$124get$35obs($this) {
    return new rx_types.RxInt.new($this);
  };
  rx_types['DoubleExtension|get#obs'] = function DoubleExtension$124get$35obs($this) {
    return new rx_types.RxDouble.new($this);
  };
  rx_types['BoolExtension|get#obs'] = function BoolExtension$124get$35obs($this) {
    return new rx_types.RxBool.new($this);
  };
  rx_types['RxT|get#obs'] = function RxT$124get$35obs(T, $this) {
    return new (rx_types.Rx$(dart.legacy(T))).new($this);
  };
  rx_types['ListExtension|get#obs'] = function ListExtension$124get$35obs(E, $this) {
    return new (rx_types.RxList$(dart.legacy(E))).new($this);
  };
  rx_types['ListExtension|addNonNull'] = function ListExtension$124addNonNull(E, $this, item) {
    if (item != null) $this[$add](item);
  };
  rx_types['ListExtension|get#addNonNull'] = function ListExtension$124get$35addNonNull(E, $this) {
    return dart.fn(item => rx_types['ListExtension|addNonNull'](dart.legacy(E), $this, item), dart.fnType(dart.void, [dart.legacy(E)]));
  };
  rx_types['ListExtension|addAllNonNull'] = function ListExtension$124addAllNonNull(E, $this, item) {
    if (item != null) $this[$addAll](item);
  };
  rx_types['ListExtension|get#addAllNonNull'] = function ListExtension$124get$35addAllNonNull(E, $this) {
    return dart.fn(item => rx_types['ListExtension|addAllNonNull'](dart.legacy(E), $this, item), dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(E)))]));
  };
  rx_types['ListExtension|addIf'] = function ListExtension$124addIf(E, $this, condition, item) {
    if (T$.VoidToLboolL().is(condition)) condition = dart.dcall(condition, []);
    if (T$.boolL().is(condition) && dart.test(condition)) $this[$add](item);
  };
  rx_types['ListExtension|get#addIf'] = function ListExtension$124get$35addIf(E, $this) {
    return dart.fn((condition, item) => rx_types['ListExtension|addIf'](dart.legacy(E), $this, condition, item), dart.fnType(dart.void, [dart.dynamic, dart.legacy(E)]));
  };
  rx_types['ListExtension|get#addAllIf'] = function ListExtension$124get$35addAllIf(E, $this) {
    return dart.fn((condition, items) => rx_types['ListExtension|addAllIf'](dart.legacy(E), $this, condition, items), dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.Iterable$(dart.legacy(E)))]));
  };
  rx_types['ListExtension|addAllIf'] = function ListExtension$124addAllIf(E, $this, condition, items) {
    if (T$.VoidToLboolL().is(condition)) condition = dart.dcall(condition, []);
    if (T$.boolL().is(condition) && dart.test(condition)) $this[$addAll](items);
  };
  rx_types['ListExtension|assign'] = function ListExtension$124assign(E, $this, item) {
    let t16;
    if (T$.RxListL().is($this)) {
      t16 = T$.RxListL().as($this);
      t16[_value$] == null ? t16[_value$] = _interceptors.JSArray$(dart.legacy(E)).of([]) : null;
    }
    $this[$clear]();
    $this[$add](item);
  };
  rx_types['ListExtension|get#assign'] = function ListExtension$124get$35assign(E, $this) {
    return dart.fn(item => rx_types['ListExtension|assign'](dart.legacy(E), $this, item), dart.fnType(dart.void, [dart.legacy(E)]));
  };
  rx_types['ListExtension|assignAll'] = function ListExtension$124assignAll(E, $this, items) {
    let t18;
    if (T$.RxListL().is($this)) {
      t18 = T$.RxListL().as($this);
      t18[_value$] == null ? t18[_value$] = _interceptors.JSArray$(dart.legacy(E)).of([]) : null;
    }
    $this[$clear]();
    $this[$addAll](items);
  };
  rx_types['ListExtension|get#assignAll'] = function ListExtension$124get$35assignAll(E, $this) {
    return dart.fn(items => rx_types['ListExtension|assignAll'](dart.legacy(E), $this, items), dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(E)))]));
  };
  rx_types['MapExtension|get#obs'] = function MapExtension$124get$35obs(K, V, $this) {
    return new (rx_types.RxMap$(dart.legacy(K), dart.legacy(V))).new($this);
  };
  rx_types['MapExtension|get#addIf'] = function MapExtension$124get$35addIf(K, V, $this) {
    return dart.fn((condition, key, value) => rx_types['MapExtension|addIf'](dart.legacy(K), dart.legacy(V), $this, condition, key, value), dart.fnType(dart.void, [dart.dynamic, dart.legacy(K), dart.legacy(V)]));
  };
  rx_types['MapExtension|addIf'] = function MapExtension$124addIf(K, V, $this, condition, key, value) {
    if (T$.VoidToLboolL().is(condition)) condition = dart.dcall(condition, []);
    if (T$.boolL().is(condition) && dart.test(condition)) {
      $this[$_set](key, value);
    }
  };
  rx_types['MapExtension|get#addAllIf'] = function MapExtension$124get$35addAllIf(K, V, $this) {
    return dart.fn((condition, values) => rx_types['MapExtension|addAllIf'](dart.legacy(K), dart.legacy(V), $this, condition, values), dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V)))]));
  };
  rx_types['MapExtension|addAllIf'] = function MapExtension$124addAllIf(K, V, $this, condition, values) {
    if (T$.VoidToLboolL().is(condition)) condition = dart.dcall(condition, []);
    if (T$.boolL().is(condition) && dart.test(condition)) $this[$addAll](values);
  };
  rx_types['MapExtension|get#assign'] = function MapExtension$124get$35assign(K, V, $this) {
    return dart.fn((key, val) => rx_types['MapExtension|assign'](dart.legacy(K), dart.legacy(V), $this, key, val), dart.fnType(dart.void, [dart.legacy(K), dart.legacy(V)]));
  };
  rx_types['MapExtension|assign'] = function MapExtension$124assign(K, V, $this, key, val) {
    let t26;
    if (T$.RxMapL().is($this)) {
      let map = T$.RxMapL().as($this);
      t26 = map;
      t26[_value$] == null ? t26[_value$] = new (_js_helper.LinkedMap$(dart.legacy(K), dart.legacy(V))).new() : null;
      map[_value$][$clear]();
      $this[$_set](key, val);
    } else {
      $this[$clear]();
      $this[$_set](key, val);
    }
  };
  rx_types['MapExtension|assignAll'] = function MapExtension$124assignAll(K, V, $this, val) {
    if (T$.RxMapL().is(val) && T$.RxMapL().is($this)) {
      if (dart.equals(T$.RxMapL().as(val)[_value$], T$.RxMapL().as($this)[_value$])) return;
    }
    if (T$.RxMapL().is($this)) {
      let map = T$.RxMapL().as($this);
      if (dart.equals(map[_value$], val)) return;
      map[_value$] = val;
      map.refresh();
    } else {
      if (dart.equals($this, val)) return;
      $this[$clear]();
      $this[$addAll](val);
    }
  };
  rx_types['MapExtension|get#assignAll'] = function MapExtension$124get$35assignAll(K, V, $this) {
    return dart.fn(val => rx_types['MapExtension|assignAll'](dart.legacy(K), dart.legacy(V), $this, val), dart.fnType(dart.void, [dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V)))]));
  };
  rx_types['SetExtension|get#obs'] = function SetExtension$124get$35obs(E, $this) {
    let t29;
    if ($this != null) {
      t29 = new (rx_types.RxSet$(dart.legacy(E))).new(collection.LinkedHashSet$(dart.legacy(E)).new());
      return (() => {
        rx_types['SetExtension|addAllNonNull'](dart.legacy(E), t29, $this);
        return t29;
      })();
    } else {
      return new (rx_types.RxSet$(dart.legacy(E))).new(null);
    }
  };
  rx_types['SetExtension|get#addNonNull'] = function SetExtension$124get$35addNonNull(E, $this) {
    return dart.fn(item => rx_types['SetExtension|addNonNull'](dart.legacy(E), $this, item), dart.fnType(dart.void, [dart.legacy(E)]));
  };
  rx_types['SetExtension|addNonNull'] = function SetExtension$124addNonNull(E, $this, item) {
    if (item != null) $this.add(item);
  };
  rx_types['SetExtension|get#addAllNonNull'] = function SetExtension$124get$35addAllNonNull(E, $this) {
    return dart.fn(item => rx_types['SetExtension|addAllNonNull'](dart.legacy(E), $this, item), dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(E)))]));
  };
  rx_types['SetExtension|addAllNonNull'] = function SetExtension$124addAllNonNull(E, $this, item) {
    if (item != null) $this.addAll(item);
  };
  rx_types['SetExtension|get#addIf'] = function SetExtension$124get$35addIf(E, $this) {
    return dart.fn((condition, item) => rx_types['SetExtension|addIf'](dart.legacy(E), $this, condition, item), dart.fnType(dart.void, [dart.dynamic, dart.legacy(E)]));
  };
  rx_types['SetExtension|addIf'] = function SetExtension$124addIf(E, $this, condition, item) {
    if (T$.VoidToLboolL().is(condition)) condition = dart.dcall(condition, []);
    if (T$.boolL().is(condition) && dart.test(condition)) $this.add(item);
  };
  rx_types['SetExtension|addAllIf'] = function SetExtension$124addAllIf(E, $this, condition, items) {
    if (T$.VoidToLboolL().is(condition)) condition = dart.dcall(condition, []);
    if (T$.boolL().is(condition) && dart.test(condition)) $this.addAll(items);
  };
  rx_types['SetExtension|get#addAllIf'] = function SetExtension$124get$35addAllIf(E, $this) {
    return dart.fn((condition, items) => rx_types['SetExtension|addAllIf'](dart.legacy(E), $this, condition, items), dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.Iterable$(dart.legacy(E)))]));
  };
  rx_types['SetExtension|get#assign'] = function SetExtension$124get$35assign(E, $this) {
    return dart.fn(item => rx_types['SetExtension|assign'](dart.legacy(E), $this, item), dart.fnType(dart.void, [dart.legacy(E)]));
  };
  rx_types['SetExtension|assign'] = function SetExtension$124assign(E, $this, item) {
    let t39;
    if (T$.RxSetL().is($this)) {
      t39 = T$.RxSetL().as($this);
      t39[_value$] == null ? t39[_value$] = collection.LinkedHashSet$(dart.legacy(E)).new() : null;
    }
    $this.clear();
    $this.add(item);
  };
  rx_types['SetExtension|get#assignAll'] = function SetExtension$124get$35assignAll(E, $this) {
    return dart.fn(items => rx_types['SetExtension|assignAll'](dart.legacy(E), $this, items), dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(E)))]));
  };
  rx_types['SetExtension|assignAll'] = function SetExtension$124assignAll(E, $this, items) {
    let t41;
    if (T$.RxSetL().is($this)) {
      t41 = T$.RxSetL().as($this);
      t41[_value$] == null ? t41[_value$] = collection.LinkedHashSet$(dart.legacy(E)).new() : null;
    }
    $this.clear();
    $this.addAll(items);
  };
  dart.trackLibraries("packages/get/get_rx/src/rx_types/rx_types.dart", {
    "package:get/get_rx/src/rx_types/rx_types.dart": rx_types
  }, {
    "package:get/get_rx/src/rx_types/rx_types.dart": ["rx_core/rx_impl.dart", "rx_core/rx_interface.dart", "rx_core/rx_num.dart", "rx_iterables/rx_list.dart", "rx_iterables/rx_set.dart", "rx_iterables/rx_map.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["rx_core/rx_impl.dart","rx_core/rx_interface.dart","rx_core/rx_num.dart","rx_iterables/rx_list.dart","rx_iterables/rx_set.dart","rx_iterables/rx_map.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../C:/packages/get/get_rx/src/rx_types/rx_types.dart.lib.js"}');
  // Exports:
  return {
    get_rx__src__rx_types__rx_types: rx_types
  };
}));

//# sourceMappingURL=rx_types.dart.lib.js.map
