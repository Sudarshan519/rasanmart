define(['dart_sdk', 'packages/get/get_core/src/get_main.dart', 'packages/get/get_core/src/smart_management.dart', 'packages/get/get_instance/src/lifecycle.dart'], (function load__packages__get__get_instance__src__get_instance_dart(dart_sdk, packages__get__get_core__src__get_main$46dart, packages__get__get_core__src__smart_management$46dart, packages__get__get_instance__src__lifecycle$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const get_main = packages__get__get_core__src__get_main$46dart.get_core__src__get_main;
  const smart_management = packages__get__get_core__src__smart_management$46dart.get_core__src__smart_management;
  const lifecycle = packages__get__get_instance__src__lifecycle$46dart.get_instance__src__lifecycle;
  var get_instance = Object.create(dart.library);
  var $toString = dartx.toString;
  var $putIfAbsent = dartx.putIfAbsent;
  var $add = dartx.add;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    StringLAndStringLToNull: () => (T.StringLAndStringLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T.StringL()])))(),
    VoidToStringL: () => (T.VoidToStringL = dart.constFn(dart.fnType(T.StringL(), [])))(),
    GetLifeCycleBaseL: () => (T.GetLifeCycleBaseL = dart.constFn(dart.legacy(lifecycle.GetLifeCycleBase)))(),
    FunctionL: () => (T.FunctionL = dart.constFn(dart.legacy(core.Function)))(),
    _HashSetOfFunctionL: () => (T._HashSetOfFunctionL = dart.constFn(collection._HashSet$(T.FunctionL())))(),
    GetxServiceMixinL: () => (T.GetxServiceMixinL = dart.constFn(dart.legacy(lifecycle.GetxServiceMixin)))(),
    _InstanceBuilderFactoryL: () => (T._InstanceBuilderFactoryL = dart.constFn(dart.legacy(get_instance._InstanceBuilderFactory)))(),
    StringLAnd_InstanceBuilderFactoryLToNull: () => (T.StringLAnd_InstanceBuilderFactoryLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T._InstanceBuilderFactoryL()])))(),
    IdentityMapOfStringL$_InstanceBuilderFactoryL: () => (T.IdentityMapOfStringL$_InstanceBuilderFactoryL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T._InstanceBuilderFactoryL())))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    HashSetOfFunctionL: () => (T.HashSetOfFunctionL = dart.constFn(collection.HashSet$(T.FunctionL())))(),
    HashSetLOfFunctionL: () => (T.HashSetLOfFunctionL = dart.constFn(dart.legacy(T.HashSetOfFunctionL())))(),
    IdentityMapOfStringL$HashSetLOfFunctionL: () => (T.IdentityMapOfStringL$HashSetLOfFunctionL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.HashSetLOfFunctionL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "package:get/get_instance/src/get_instance.dart",
    "file:///D:/tutorial/flutter/.pub-cache/hosted/pub.dartlang.org/get-3.26.0/lib/get_instance/src/get_instance.dart"
  ];
  var isPermanent$ = dart.privateName(get_instance, "InstanceInfo.isPermanent");
  var isSingleton$ = dart.privateName(get_instance, "InstanceInfo.isSingleton");
  var isRegistered$ = dart.privateName(get_instance, "InstanceInfo.isRegistered");
  var isPrepared$ = dart.privateName(get_instance, "InstanceInfo.isPrepared");
  var isInit$ = dart.privateName(get_instance, "InstanceInfo.isInit");
  get_instance.InstanceInfo = class InstanceInfo extends core.Object {
    get isPermanent() {
      return this[isPermanent$];
    }
    set isPermanent(value) {
      super.isPermanent = value;
    }
    get isSingleton() {
      return this[isSingleton$];
    }
    set isSingleton(value) {
      super.isSingleton = value;
    }
    get isRegistered() {
      return this[isRegistered$];
    }
    set isRegistered(value) {
      super.isRegistered = value;
    }
    get isPrepared() {
      return this[isPrepared$];
    }
    set isPrepared(value) {
      super.isPrepared = value;
    }
    get isInit() {
      return this[isInit$];
    }
    set isInit(value) {
      super.isInit = value;
    }
    get isCreate() {
      return !dart.test(this.isSingleton);
    }
  };
  (get_instance.InstanceInfo.new = function(opts) {
    let isPermanent = opts && 'isPermanent' in opts ? opts.isPermanent : null;
    let isSingleton = opts && 'isSingleton' in opts ? opts.isSingleton : null;
    let isRegistered = opts && 'isRegistered' in opts ? opts.isRegistered : null;
    let isPrepared = opts && 'isPrepared' in opts ? opts.isPrepared : null;
    let isInit = opts && 'isInit' in opts ? opts.isInit : null;
    this[isPermanent$] = isPermanent;
    this[isSingleton$] = isSingleton;
    this[isRegistered$] = isRegistered;
    this[isPrepared$] = isPrepared;
    this[isInit$] = isInit;
    ;
  }).prototype = get_instance.InstanceInfo.prototype;
  dart.addTypeTests(get_instance.InstanceInfo);
  dart.addTypeCaches(get_instance.InstanceInfo);
  dart.setGetterSignature(get_instance.InstanceInfo, () => ({
    __proto__: dart.getGetters(get_instance.InstanceInfo.__proto__),
    isCreate: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(get_instance.InstanceInfo, I[0]);
  dart.setFieldSignature(get_instance.InstanceInfo, () => ({
    __proto__: dart.getFields(get_instance.InstanceInfo.__proto__),
    isPermanent: dart.finalFieldType(dart.legacy(core.bool)),
    isSingleton: dart.finalFieldType(dart.legacy(core.bool)),
    isRegistered: dart.finalFieldType(dart.legacy(core.bool)),
    isPrepared: dart.finalFieldType(dart.legacy(core.bool)),
    isInit: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var _insert = dart.privateName(get_instance, "_insert");
  var _getKey = dart.privateName(get_instance, "_getKey");
  var _startController = dart.privateName(get_instance, "_startController");
  var _registerRouteInstance = dart.privateName(get_instance, "_registerRouteInstance");
  var _initDependencies = dart.privateName(get_instance, "_initDependencies");
  var _getDependency = dart.privateName(get_instance, "_getDependency");
  get_instance.GetInstance = class GetInstance extends core.Object {
    static new() {
      let t0;
      t0 = get_instance.GetInstance._getInstance;
      return t0 == null ? get_instance.GetInstance._getInstance = new get_instance.GetInstance.__() : t0;
    }
    call(T) {
      return this.find(dart.legacy(T));
    }
    printInstanceStack() {
      let t1, t0;
      t0 = get_main.Get;
      t1 = dart.toString(get_instance.GetInstance._routesKey);
      t0.log(t1);
    }
    injector(S, fn, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : false;
      this.lazyPut(dart.legacy(S), dart.fn(() => fn(this), dart.fnType(dart.legacy(S), [])), {tag: tag, fenix: fenix});
    }
    putAsync(S, builder, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      return async.async(dart.legacy(S), (function* putAsync() {
        return this.put(dart.legacy(S), yield builder(), {tag: tag, permanent: permanent});
      }).bind(this));
    }
    put(S, dependency, opts) {
      let t0;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      this[_insert](dart.legacy(S), {isSingleton: true, name: tag, permanent: permanent, builder: (t0 = builder, t0 == null ? dart.fn(() => dependency, dart.fnType(dart.legacy(S), [])) : t0)});
      return this.find(dart.legacy(S), {tag: tag});
    }
    lazyPut(S, builder, opts) {
      let t0;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      this[_insert](dart.legacy(S), {isSingleton: true, name: tag, permanent: permanent, builder: builder, fenix: (t0 = fenix, t0 == null ? get_main.Get.smartManagement == smart_management.SmartManagement.keepFactory : t0)});
    }
    create(S, builder, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : true;
      this[_insert](dart.legacy(S), {isSingleton: false, name: tag, builder: builder, permanent: permanent});
    }
    [_insert](S, opts) {
      let isSingleton = opts && 'isSingleton' in opts ? opts.isSingleton : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : false;
      if (!(builder != null)) dart.assertFailed(null, I[1], 180, 12, "builder != null");
      let key = this[_getKey](dart.wrapType(dart.legacy(S)), name);
      get_instance.GetInstance._singl[$putIfAbsent](key, dart.fn(() => new (get_instance._InstanceBuilderFactory$(dart.legacy(S))).new(isSingleton, builder, permanent, false, fenix, name), dart.fnType(dart.legacy(get_instance._InstanceBuilderFactory$(dart.legacy(S))), [])));
    }
    removeDependencyByRoute(routeName) {
      let t0;
      let keysToRemove = T.JSArrayOfStringL().of([]);
      get_instance.GetInstance._routesKey[$forEach](dart.fn((key, value) => {
        if (value == routeName) {
          keysToRemove[$add](key);
        }
      }, T.StringLAndStringLToNull()));
      if (dart.test(get_instance.GetInstance._routesByCreate[$containsKey](routeName))) {
        for (let onClose of get_instance.GetInstance._routesByCreate[$_get](routeName)) {
          if (onClose != null) {
            dart.dcall(onClose, []);
          }
        }
        get_instance.GetInstance._routesByCreate[$_get](routeName).clear();
        get_instance.GetInstance._routesByCreate[$remove](routeName);
      }
      for (let element of keysToRemove) {
        this.delete(dart.dynamic, {key: element});
      }
      for (let element of keysToRemove) {
        t0 = get_instance.GetInstance._routesKey;
        t0 == null ? null : t0[$remove](element);
      }
      keysToRemove[$clear]();
    }
    [_initDependencies](S, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let key = this[_getKey](dart.wrapType(dart.legacy(S)), name);
      let isInit = get_instance.GetInstance._singl[$_get](key).isInit;
      let i = null;
      if (!dart.test(isInit)) {
        i = this[_startController](dart.legacy(S), {tag: name});
        if (dart.test(get_instance.GetInstance._singl[$_get](key).isSingleton)) {
          get_instance.GetInstance._singl[$_get](key).isInit = true;
          if (get_main.Get.smartManagement != smart_management.SmartManagement.onlyBuilder) {
            this[_registerRouteInstance](dart.legacy(S), {tag: name});
          }
        }
      }
      return i;
    }
    [_registerRouteInstance](S, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      get_instance.GetInstance._routesKey[$putIfAbsent](this[_getKey](dart.wrapType(dart.legacy(S)), tag), dart.fn(() => get_main.Get.reference, T.VoidToStringL()));
    }
    getInstanceInfo(S, opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let build = this[_getDependency](dart.legacy(S), {tag: tag});
      return new get_instance.InstanceInfo.new({isPermanent: (t0 = build, t0 == null ? null : t0.permanent), isSingleton: (t0$ = build, t0$ == null ? null : t0$.isSingleton), isRegistered: this.isRegistered(dart.legacy(S), {tag: tag}), isPrepared: !dart.test((t0$1 = (t0$0 = build, t0$0 == null ? null : t0$0.isInit), t0$1 == null ? true : t0$1)), isInit: (t0$2 = build, t0$2 == null ? null : t0$2.isInit)});
    }
    [_getDependency](S, opts) {
      let t0, t2, t1, t0$;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let newKey = (t0 = key, t0 == null ? this[_getKey](dart.wrapType(dart.legacy(S)), tag) : t0);
      if (!dart.test(get_instance.GetInstance._singl[$containsKey](newKey))) {
        t0$ = get_main.Get;
        t1 = "Instance \"" + dart.str(newKey) + "\" is not registered.";
        t2 = true;
        t0$.log(t1, {isError: t2});
        return null;
      } else {
        return get_instance.GetInstance._singl[$_get](newKey);
      }
    }
    [_startController](S, opts) {
      let t1, t0, t1$, t0$, t1$0, t0$0, t0$1;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = this[_getKey](dart.wrapType(dart.legacy(S)), tag);
      let i = dart.legacy(S).as(get_instance.GetInstance._singl[$_get](key).getDependency());
      if (T.GetLifeCycleBaseL().is(i)) {
        if (i.onStart != null) {
          i.onStart.call();
          if (tag == null) {
            t0 = get_main.Get;
            t1 = "Instance \"" + dart.str(dart.wrapType(dart.legacy(S))) + "\" has been initialized";
            t0.log(t1);
          } else {
            t0$ = get_main.Get;
            t1$ = "Instance \"" + dart.str(dart.wrapType(dart.legacy(S))) + "\" with tag \"" + dart.str(tag) + "\" has been initialized";
            t0$.log(t1$);
          }
        }
        if (!dart.test(get_instance.GetInstance._singl[$_get](key).isSingleton) && i.onDelete != null) {
          t0$0 = get_instance.GetInstance._routesByCreate;
          t1$0 = get_main.Get.reference;
          t0$0[$_get](t1$0) == null ? t0$0[$_set](t1$0, new (T._HashSetOfFunctionL()).new()) : null;
          get_instance.GetInstance._routesByCreate[$_get](get_main.Get.reference).add((t0$1 = i.onDelete, t0$1 == null ? null : dart.bind(t0$1, 'call')));
        }
      }
      return i;
    }
    putOrFind(S, dep, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = this[_getKey](dart.wrapType(dart.legacy(S)), tag);
      if (dart.test(get_instance.GetInstance._singl[$containsKey](key))) {
        return dart.legacy(S).as(get_instance.GetInstance._singl[$_get](key).getDependency());
      } else {
        return get_instance.GetInstance.new().put(dart.legacy(S), dep(), {tag: tag});
      }
    }
    find(S, opts) {
      let t0;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = this[_getKey](dart.wrapType(dart.legacy(S)), tag);
      if (dart.test(this.isRegistered(dart.legacy(S), {tag: tag}))) {
        if (get_instance.GetInstance._singl[$_get](key) == null) {
          if (tag == null) {
            dart.throw("Class \"" + dart.str(dart.wrapType(dart.legacy(S))) + "\" is not registered");
          } else {
            dart.throw("Class \"" + dart.str(dart.wrapType(dart.legacy(S))) + "\" with tag \"" + dart.str(tag) + "\" is not registered");
          }
        }
        let i = this[_initDependencies](dart.legacy(S), {name: tag});
        t0 = i;
        return t0 == null ? dart.legacy(S).as(get_instance.GetInstance._singl[$_get](key).getDependency()) : t0;
      } else {
        dart.throw("\"" + dart.str(dart.wrapType(dart.legacy(S))) + "\" not found. You need to call \"Get.put(" + dart.str(dart.wrapType(dart.legacy(S))) + "())\" or \"Get.lazyPut(()=>" + dart.str(dart.wrapType(dart.legacy(S))) + "())\"");
      }
    }
    [_getKey](type, name) {
      return name == null ? dart.toString(type) : dart.notNull(dart.toString(type)) + dart.notNull(name);
    }
    reset(opts) {
      let clearFactory = opts && 'clearFactory' in opts ? opts.clearFactory : true;
      let clearRouteBindings = opts && 'clearRouteBindings' in opts ? opts.clearRouteBindings : true;
      if (dart.test(clearRouteBindings)) get_instance.GetInstance._routesKey[$clear]();
      get_instance.GetInstance._singl[$clear]();
      return true;
    }
    delete(S, opts) {
      let t0, t2, t1, t0$, t2$, t1$, t0$0, t1$0, t0$1, t2$0, t1$1, t0$2, t1$2, t0$3;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let force = opts && 'force' in opts ? opts.force : false;
      let newKey = (t0 = key, t0 == null ? this[_getKey](dart.wrapType(dart.legacy(S)), tag) : t0);
      if (!dart.test(get_instance.GetInstance._singl[$containsKey](newKey))) {
        t0$ = get_main.Get;
        t1 = "Instance \"" + dart.str(newKey) + "\" already removed.";
        t2 = true;
        t0$.log(t1, {isError: t2});
        return false;
      }
      let builder = get_instance.GetInstance._singl[$_get](newKey);
      if (dart.test(builder.permanent) && !dart.test(force)) {
        t0$0 = get_main.Get;
        t1$ = "\"" + dart.str(newKey) + "\" has been marked as permanent, SmartManagement is not authorized to delete it.";
        t2$ = true;
        t0$0.log(t1$, {isError: t2$});
        return false;
      }
      let i = builder.dependency;
      if (T.GetxServiceMixinL().is(i) && !dart.test(force)) {
        return false;
      }
      if (T.GetLifeCycleBaseL().is(i) && i.onDelete != null) {
        i.onDelete.call();
        t0$1 = get_main.Get;
        t1$0 = "\"" + dart.str(newKey) + "\" onDelete() called";
        t0$1.log(t1$0);
      }
      if (dart.test(builder.fenix)) {
        builder.dependency = null;
        builder.isInit = false;
      } else {
        get_instance.GetInstance._singl[$remove](newKey);
        if (dart.test(get_instance.GetInstance._singl[$containsKey](newKey))) {
          t0$2 = get_main.Get;
          t1$1 = "Error removing object \"" + dart.str(newKey) + "\"";
          t2$0 = true;
          t0$2.log(t1$1, {isError: t2$0});
        } else {
          t0$3 = get_main.Get;
          t1$2 = "\"" + dart.str(newKey) + "\" deleted from memory";
          t0$3.log(t1$2);
        }
      }
      return true;
    }
    reloadAll(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      get_instance.GetInstance._singl[$forEach](dart.fn((key, value) => {
        let t1, t0, t1$, t0$;
        if (dart.test(value.permanent) && !dart.test(force)) {
          t0 = get_main.Get;
          t1 = "Instance \"" + dart.str(key) + "\" is permanent. Skipping reload";
          t0.log(t1);
        } else {
          value.dependency = null;
          value.isInit = false;
          t0$ = get_main.Get;
          t1$ = "Instance \"" + dart.str(key) + "\" was reloaded.";
          t0$.log(t1$);
        }
      }, T.StringLAnd_InstanceBuilderFactoryLToNull()));
    }
    reload(S, opts) {
      let t0, t2, t1, t0$, t1$, t0$0;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let force = opts && 'force' in opts ? opts.force : false;
      let newKey = (t0 = key, t0 == null ? this[_getKey](dart.wrapType(dart.legacy(S)), tag) : t0);
      let builder = this[_getDependency](dart.legacy(S), {tag: tag, key: newKey});
      if (builder == null) return;
      if (dart.test(builder.permanent) && !dart.test(force)) {
        t0$ = get_main.Get;
        t1 = "Instance \"" + dart.str(newKey) + "\" is permanent. Use [force = true] to force the restart.";
        t2 = true;
        t0$.log(t1, {isError: t2});
        return;
      }
      builder.dependency = null;
      builder.isInit = false;
      t0$0 = get_main.Get;
      t1$ = "Instance \"" + dart.str(newKey) + "\" was restarted.";
      t0$0.log(t1$);
    }
    isRegistered(S, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return get_instance.GetInstance._singl[$containsKey](this[_getKey](dart.wrapType(dart.legacy(S)), tag));
    }
    isPrepared(S, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let newKey = this[_getKey](dart.wrapType(dart.legacy(S)), tag);
      let builder = this[_getDependency](dart.legacy(S), {tag: tag, key: newKey});
      if (builder == null) {
        return false;
      }
      if (!dart.test(builder.isInit)) {
        return true;
      }
      return false;
    }
  };
  (get_instance.GetInstance.__ = function() {
    ;
  }).prototype = get_instance.GetInstance.prototype;
  dart.addTypeTests(get_instance.GetInstance);
  dart.addTypeCaches(get_instance.GetInstance);
  dart.setMethodSignature(get_instance.GetInstance, () => ({
    __proto__: dart.getMethods(get_instance.GetInstance.__proto__),
    call: dart.gFnType(T => [dart.legacy(T), []]),
    printInstanceStack: dart.fnType(dart.void, []),
    injector: dart.gFnType(S => [dart.void, [dart.legacy(dart.fnType(dart.legacy(S), [dart.legacy(get_instance.GetInstance)]))], {fenix: dart.legacy(core.bool), tag: dart.legacy(core.String)}, {}]),
    putAsync: dart.gFnType(S => [dart.legacy(async.Future$(dart.legacy(S))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(S))), []))], {permanent: dart.legacy(core.bool), tag: dart.legacy(core.String)}, {}]),
    put: dart.gFnType(S => [dart.legacy(S), [dart.legacy(S)], {builder: dart.legacy(dart.fnType(dart.legacy(S), [])), permanent: dart.legacy(core.bool), tag: dart.legacy(core.String)}, {}]),
    lazyPut: dart.gFnType(S => [dart.void, [dart.legacy(dart.fnType(dart.legacy(S), []))], {fenix: dart.legacy(core.bool), permanent: dart.legacy(core.bool), tag: dart.legacy(core.String)}, {}]),
    create: dart.gFnType(S => [dart.void, [dart.legacy(dart.fnType(dart.legacy(S), []))], {permanent: dart.legacy(core.bool), tag: dart.legacy(core.String)}, {}]),
    [_insert]: dart.gFnType(S => [dart.void, [], {builder: dart.legacy(dart.fnType(dart.legacy(S), [])), fenix: dart.legacy(core.bool), isSingleton: dart.legacy(core.bool), name: dart.legacy(core.String), permanent: dart.legacy(core.bool)}, {}]),
    removeDependencyByRoute: dart.fnType(dart.void, [dart.legacy(core.String)]),
    [_initDependencies]: dart.gFnType(S => [dart.legacy(S), [], {name: dart.legacy(core.String)}, {}]),
    [_registerRouteInstance]: dart.gFnType(S => [dart.void, [], {tag: dart.legacy(core.String)}, {}]),
    getInstanceInfo: dart.gFnType(S => [dart.legacy(get_instance.InstanceInfo), [], {tag: dart.legacy(core.String)}, {}]),
    [_getDependency]: dart.gFnType(S => [dart.legacy(get_instance._InstanceBuilderFactory), [], {key: dart.legacy(core.String), tag: dart.legacy(core.String)}, {}]),
    [_startController]: dart.gFnType(S => [dart.legacy(S), [], {tag: dart.legacy(core.String)}, {}]),
    putOrFind: dart.gFnType(S => [dart.legacy(S), [dart.legacy(dart.fnType(dart.legacy(S), []))], {tag: dart.legacy(core.String)}, {}]),
    find: dart.gFnType(S => [dart.legacy(S), [], {tag: dart.legacy(core.String)}, {}]),
    [_getKey]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Type), dart.legacy(core.String)]),
    reset: dart.fnType(dart.legacy(core.bool), [], {clearFactory: dart.legacy(core.bool), clearRouteBindings: dart.legacy(core.bool)}, {}),
    delete: dart.gFnType(S => [dart.legacy(core.bool), [], {force: dart.legacy(core.bool), key: dart.legacy(core.String), tag: dart.legacy(core.String)}, {}]),
    reloadAll: dart.fnType(dart.void, [], {force: dart.legacy(core.bool)}, {}),
    reload: dart.gFnType(S => [dart.void, [], {force: dart.legacy(core.bool), key: dart.legacy(core.String), tag: dart.legacy(core.String)}, {}]),
    isRegistered: dart.gFnType(S => [dart.legacy(core.bool), [], {tag: dart.legacy(core.String)}, {}]),
    isPrepared: dart.gFnType(S => [dart.legacy(core.bool), [], {tag: dart.legacy(core.String)}, {}])
  }));
  dart.setLibraryUri(get_instance.GetInstance, I[0]);
  dart.defineLazy(get_instance.GetInstance, {
    /*get_instance.GetInstance._getInstance*/get _getInstance() {
      return null;
    },
    set _getInstance(_) {},
    /*get_instance.GetInstance._singl*/get _singl() {
      return new (T.IdentityMapOfStringL$_InstanceBuilderFactoryL()).new();
    },
    /*get_instance.GetInstance._routesKey*/get _routesKey() {
      return new (T.IdentityMapOfStringL$StringL()).new();
    },
    /*get_instance.GetInstance._routesByCreate*/get _routesByCreate() {
      return new (T.IdentityMapOfStringL$HashSetLOfFunctionL()).new();
    }
  }, true);
  var dependency = dart.privateName(get_instance, "_InstanceBuilderFactory.dependency");
  var builderFunc$ = dart.privateName(get_instance, "_InstanceBuilderFactory.builderFunc");
  var _showInitLog = dart.privateName(get_instance, "_showInitLog");
  const _is__InstanceBuilderFactory_default = Symbol('_is__InstanceBuilderFactory_default');
  get_instance._InstanceBuilderFactory$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var VoidToSL = () => (VoidToSL = dart.constFn(dart.fnType(SL(), [])))();
    var VoidToLSL = () => (VoidToLSL = dart.constFn(dart.legacy(VoidToSL())))();
    class _InstanceBuilderFactory extends core.Object {
      get dependency() {
        return this[dependency];
      }
      set dependency(value) {
        this[dependency] = SL().as(value);
      }
      get builderFunc() {
        return this[builderFunc$];
      }
      set builderFunc(value) {
        this[builderFunc$] = VoidToLSL().as(value);
      }
      [_showInitLog]() {
        let t1, t0, t1$, t0$;
        if (this.tag == null) {
          t0 = get_main.Get;
          t1 = "Instance \"" + dart.str(dart.wrapType(SL())) + "\" has been created";
          t0.log(t1);
        } else {
          t0$ = get_main.Get;
          t1$ = "Instance \"" + dart.str(dart.wrapType(SL())) + "\" has been created with tag \"" + dart.str(this.tag) + "\"";
          t0$.log(t1$);
        }
      }
      getDependency() {
        if (dart.test(this.isSingleton)) {
          if (this.dependency == null) {
            this[_showInitLog]();
            this.dependency = this.builderFunc();
          }
          return this.dependency;
        } else {
          return this.builderFunc();
        }
      }
    }
    (_InstanceBuilderFactory.new = function(isSingleton, builderFunc, permanent, isInit, fenix, tag) {
      this[dependency] = null;
      this.permanent = false;
      this.isInit = false;
      this.isSingleton = isSingleton;
      this[builderFunc$] = builderFunc;
      this.permanent = permanent;
      this.isInit = isInit;
      this.fenix = fenix;
      this.tag = tag;
      ;
    }).prototype = _InstanceBuilderFactory.prototype;
    dart.addTypeTests(_InstanceBuilderFactory);
    _InstanceBuilderFactory.prototype[_is__InstanceBuilderFactory_default] = true;
    dart.addTypeCaches(_InstanceBuilderFactory);
    dart.setMethodSignature(_InstanceBuilderFactory, () => ({
      __proto__: dart.getMethods(_InstanceBuilderFactory.__proto__),
      [_showInitLog]: dart.fnType(dart.void, []),
      getDependency: dart.fnType(dart.legacy(S), [])
    }));
    dart.setLibraryUri(_InstanceBuilderFactory, I[0]);
    dart.setFieldSignature(_InstanceBuilderFactory, () => ({
      __proto__: dart.getFields(_InstanceBuilderFactory.__proto__),
      isSingleton: dart.fieldType(dart.legacy(core.bool)),
      fenix: dart.fieldType(dart.legacy(core.bool)),
      dependency: dart.fieldType(dart.legacy(S)),
      builderFunc: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(S), []))),
      permanent: dart.fieldType(dart.legacy(core.bool)),
      isInit: dart.fieldType(dart.legacy(core.bool)),
      tag: dart.fieldType(dart.legacy(core.String))
    }));
    return _InstanceBuilderFactory;
  });
  get_instance._InstanceBuilderFactory = get_instance._InstanceBuilderFactory$();
  dart.addTypeTests(get_instance._InstanceBuilderFactory, _is__InstanceBuilderFactory_default);
  dart.trackLibraries("packages/get/get_instance/src/get_instance.dart", {
    "package:get/get_instance/src/get_instance.dart": get_instance
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["get_instance.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../C:/packages/get/get_instance/src/get_instance.dart.lib.js"}');
  // Exports:
  return {
    get_instance__src__get_instance: get_instance
  };
}));

//# sourceMappingURL=get_instance.dart.lib.js.map
